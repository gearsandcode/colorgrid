{"ast":null,"code":"var _jsxFileName = \"/Users/jamessullivan/Documents/color-grid/src/components/ColorGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { hsbToRgb, rgbToHex, getRgbLabLightness, calculateContrastRatio, colorDistance } from \"../utils/colorUtils\";\nimport \"../styles/ColorGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorGrid = ({\n  hue,\n  isFiltering,\n  isATextContrast,\n  isAATextContrast,\n  isAAATextContrast,\n  lValues,\n  onDotClick,\n  activeDots,\n  keyHexCode\n}) => {\n  _s();\n  const [dots, setDots] = useState([]);\n  const [colorCache, setColorCache] = useState([]);\n\n  // Pre-calculate color cache\n  useEffect(() => {\n    const newColorCache = Array(101).fill(null).map(() => Array(101).fill(null));\n    for (let brightness = 0; brightness <= 100; brightness++) {\n      for (let saturation = 0; saturation <= 100; saturation++) {\n        const [r, g, b] = hsbToRgb(hue, saturation, brightness);\n        const hexColor = rgbToHex(r, g, b).toUpperCase();\n        const labLightness = Math.round(getRgbLabLightness(r, g, b));\n        newColorCache[brightness][saturation] = {\n          hexColor,\n          labLightness,\n          hsbText: `H: ${hue}° S: ${saturation}% B: ${brightness}%`\n        };\n      }\n    }\n    setColorCache(newColorCache);\n  }, [hue]);\n\n  // Update dots when cache or filters change\n  useEffect(() => {\n    const newDots = [];\n    const lValuesSet = new Set(lValues);\n    let closestDot = null;\n    let hasExactMatch = false;\n\n    // First pass: collect all dots and find closest match\n    for (let row = 0; row < 101; row++) {\n      for (let col = 0; col < 101; col++) {\n        var _colorCache$brightnes;\n        const brightness = 100 - row;\n        const cached = (_colorCache$brightnes = colorCache[brightness]) === null || _colorCache$brightnes === void 0 ? void 0 : _colorCache$brightnes[col];\n        if (cached) {\n          const exactMatch = cached.hexColor.toUpperCase() === keyHexCode.toUpperCase();\n          if (exactMatch) {\n            hasExactMatch = true;\n            closestDot = {\n              distance: 0,\n              row,\n              col\n            };\n          } else if (!hasExactMatch) {\n            const distance = colorDistance(cached.hexColor, keyHexCode);\n            if (!closestDot || distance < closestDot.distance) {\n              closestDot = {\n                distance,\n                row,\n                col\n              };\n            }\n          }\n          let isFiltered = false;\n          if (isFiltering) {\n            isFiltered = !lValuesSet.has(cached.labLightness);\n            if (!isFiltered && (isATextContrast || isAATextContrast || isAAATextContrast)) {\n              const contrastRatio = calculateContrastRatio(cached.hexColor, \"#000000\");\n              if (isATextContrast) {\n                isFiltered = contrastRatio < 3;\n              } else if (isAATextContrast) {\n                isFiltered = contrastRatio < 4.5;\n              } else if (isAAATextContrast) {\n                isFiltered = contrastRatio < 7;\n              }\n            }\n          } else if (isATextContrast || isAATextContrast || isAAATextContrast) {\n            const contrastRatio = calculateContrastRatio(cached.hexColor, \"#000000\");\n            if (isATextContrast) {\n              isFiltered = contrastRatio < 3;\n            } else if (isAATextContrast) {\n              isFiltered = contrastRatio < 4.5;\n            } else if (isAAATextContrast) {\n              isFiltered = contrastRatio < 7;\n            }\n          }\n          const dotKey = `${row}-${col}`;\n          newDots.push({\n            row,\n            col,\n            hexColor: cached.hexColor,\n            labLightness: cached.labLightness,\n            hsbText: cached.hsbText,\n            isActive: activeDots.has(dotKey),\n            isFiltered\n          });\n        }\n      }\n    }\n\n    // Second pass: update the single closest dot to be active\n    if (closestDot) {\n      const dotIndex = newDots.findIndex(dot => dot.row === closestDot.row && dot.col === closestDot.col);\n      if (dotIndex !== -1) {\n        newDots[dotIndex] = {\n          ...newDots[dotIndex],\n          isActive: true\n        };\n      }\n    }\n    setDots(newDots);\n  }, [colorCache, isFiltering, isATextContrast, isAATextContrast, isAAATextContrast, lValues, activeDots, keyHexCode]);\n  const handleDotClick = useCallback(dot => {\n    onDotClick(dot);\n  }, [onDotClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"color-grid\",\n    children: dots.map(dot => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dot ${dot.isActive ? \"active\" : \"\"} ${dot.isFiltered ? \"filtered\" : \"\"}`,\n      style: {\n        backgroundColor: dot.hexColor\n      },\n      onClick: () => handleDotClick(dot),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hex-tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-value\",\n          children: dot.hexColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lab-value\",\n          children: [\"L*: \", dot.labLightness]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hsb-value\",\n          children: dot.hsbText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, `${dot.row}-${dot.col}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorGrid, \"tBhGWsj210Woe927C85gBOnny5U=\");\n_c = ColorGrid;\nexport default ColorGrid;\nvar _c;\n$RefreshReg$(_c, \"ColorGrid\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","hsbToRgb","rgbToHex","getRgbLabLightness","calculateContrastRatio","colorDistance","jsxDEV","_jsxDEV","ColorGrid","hue","isFiltering","isATextContrast","isAATextContrast","isAAATextContrast","lValues","onDotClick","activeDots","keyHexCode","_s","dots","setDots","colorCache","setColorCache","newColorCache","Array","fill","map","brightness","saturation","r","g","b","hexColor","toUpperCase","labLightness","Math","round","hsbText","newDots","lValuesSet","Set","closestDot","hasExactMatch","row","col","_colorCache$brightnes","cached","exactMatch","distance","isFiltered","has","contrastRatio","dotKey","push","isActive","dotIndex","findIndex","dot","handleDotClick","className","children","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamessullivan/Documents/color-grid/src/components/ColorGrid.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { Dot, ColorCache } from \"../types\";\nimport {\n  hsbToRgb,\n  rgbToHex,\n  getRgbLabLightness,\n  calculateContrastRatio,\n  colorDistance,\n} from \"../utils/colorUtils\";\nimport \"../styles/ColorGrid.css\";\n\ninterface ColorGridProps {\n  hue: number;\n  isFiltering: boolean;\n  isATextContrast: boolean;\n  isAATextContrast: boolean;\n  isAAATextContrast: boolean;\n  lValues: number[];\n  onDotClick: (dot: Dot) => void;\n  activeDots: Set<string>;\n  keyHexCode: string;\n}\n\nconst ColorGrid: React.FC<ColorGridProps> = ({\n  hue,\n  isFiltering,\n  isATextContrast,\n  isAATextContrast,\n  isAAATextContrast,\n  lValues,\n  onDotClick,\n  activeDots,\n  keyHexCode,\n}) => {\n  const [dots, setDots] = useState<Dot[]>([]);\n  const [colorCache, setColorCache] = useState<ColorCache[][]>([]);\n\n  // Pre-calculate color cache\n  useEffect(() => {\n    const newColorCache: ColorCache[][] = Array(101)\n      .fill(null)\n      .map(() => Array(101).fill(null));\n\n    for (let brightness = 0; brightness <= 100; brightness++) {\n      for (let saturation = 0; saturation <= 100; saturation++) {\n        const [r, g, b] = hsbToRgb(hue, saturation, brightness);\n        const hexColor = rgbToHex(r, g, b).toUpperCase();\n        const labLightness = Math.round(getRgbLabLightness(r, g, b));\n        newColorCache[brightness][saturation] = {\n          hexColor,\n          labLightness,\n          hsbText: `H: ${hue}° S: ${saturation}% B: ${brightness}%`,\n        };\n      }\n    }\n\n    setColorCache(newColorCache);\n  }, [hue]);\n\n  // Update dots when cache or filters change\n  useEffect(() => {\n    const newDots: Dot[] = [];\n    const lValuesSet = new Set(lValues);\n    let closestDot: { distance: number; row: number; col: number } | null =\n      null;\n    let hasExactMatch = false;\n\n    // First pass: collect all dots and find closest match\n    for (let row = 0; row < 101; row++) {\n      for (let col = 0; col < 101; col++) {\n        const brightness = 100 - row;\n        const cached = colorCache[brightness]?.[col];\n\n        if (cached) {\n          const exactMatch =\n            cached.hexColor.toUpperCase() === keyHexCode.toUpperCase();\n          if (exactMatch) {\n            hasExactMatch = true;\n            closestDot = { distance: 0, row, col };\n          } else if (!hasExactMatch) {\n            const distance = colorDistance(cached.hexColor, keyHexCode);\n            if (!closestDot || distance < closestDot.distance) {\n              closestDot = { distance, row, col };\n            }\n          }\n\n          let isFiltered = false;\n          if (isFiltering) {\n            isFiltered = !lValuesSet.has(cached.labLightness);\n            if (\n              !isFiltered &&\n              (isATextContrast || isAATextContrast || isAAATextContrast)\n            ) {\n              const contrastRatio = calculateContrastRatio(\n                cached.hexColor,\n                \"#000000\"\n              );\n              if (isATextContrast) {\n                isFiltered = contrastRatio < 3;\n              } else if (isAATextContrast) {\n                isFiltered = contrastRatio < 4.5;\n              } else if (isAAATextContrast) {\n                isFiltered = contrastRatio < 7;\n              }\n            }\n          } else if (isATextContrast || isAATextContrast || isAAATextContrast) {\n            const contrastRatio = calculateContrastRatio(\n              cached.hexColor,\n              \"#000000\"\n            );\n            if (isATextContrast) {\n              isFiltered = contrastRatio < 3;\n            } else if (isAATextContrast) {\n              isFiltered = contrastRatio < 4.5;\n            } else if (isAAATextContrast) {\n              isFiltered = contrastRatio < 7;\n            }\n          }\n\n          const dotKey = `${row}-${col}`;\n          newDots.push({\n            row,\n            col,\n            hexColor: cached.hexColor,\n            labLightness: cached.labLightness,\n            hsbText: cached.hsbText,\n            isActive: activeDots.has(dotKey),\n            isFiltered,\n          });\n        }\n      }\n    }\n\n    // Second pass: update the single closest dot to be active\n    if (closestDot) {\n      const dotIndex = newDots.findIndex(\n        (dot) => dot.row === closestDot!.row && dot.col === closestDot!.col\n      );\n      if (dotIndex !== -1) {\n        newDots[dotIndex] = {\n          ...newDots[dotIndex],\n          isActive: true,\n        };\n      }\n    }\n\n    setDots(newDots);\n  }, [\n    colorCache,\n    isFiltering,\n    isATextContrast,\n    isAATextContrast,\n    isAAATextContrast,\n    lValues,\n    activeDots,\n    keyHexCode,\n  ]);\n\n  const handleDotClick = useCallback(\n    (dot: Dot) => {\n      onDotClick(dot);\n    },\n    [onDotClick]\n  );\n\n  return (\n    <div className=\"color-grid\">\n      {dots.map((dot) => (\n        <div\n          key={`${dot.row}-${dot.col}`}\n          className={`dot ${dot.isActive ? \"active\" : \"\"} ${\n            dot.isFiltered ? \"filtered\" : \"\"\n          }`}\n          style={{ backgroundColor: dot.hexColor }}\n          onClick={() => handleDotClick(dot)}\n        >\n          <div className=\"hex-tooltip\">\n            <div className=\"hex-value\">{dot.hexColor}</div>\n            <div className=\"lab-value\">L*: {dot.labLightness}</div>\n            <div className=\"hsb-value\">{dot.hsbText}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ColorGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}