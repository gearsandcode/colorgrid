{"ast":null,"code":"var _jsxFileName = \"/Users/jamessullivan/Documents/color-grid/src/components/ColorGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { hsbToRgb, rgbToHex, getRgbLabLightness, hexToHsb } from \"../utils/colorUtils\";\nimport \"../styles/ColorGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorGrid = ({\n  hue,\n  isFiltering,\n  isATextContrast,\n  isAATextContrast,\n  isAAATextContrast,\n  lValues,\n  onDotClick,\n  activeDots,\n  keyHexCode,\n  isPickingColor,\n  activeLValue\n}) => {\n  _s();\n  const [dots, setDots] = useState([]);\n  const [colorCache, setColorCache] = useState([]);\n\n  // Pre-calculate color cache\n  useEffect(() => {\n    const newColorCache = Array(101).fill(null).map(() => Array(101).fill(null));\n    for (let brightness = 0; brightness <= 100; brightness++) {\n      for (let saturation = 0; saturation <= 100; saturation++) {\n        const [r, g, b] = hsbToRgb(hue, saturation, brightness);\n        const hexColor = rgbToHex(r, g, b).toUpperCase();\n        const labLightness = Math.round(getRgbLabLightness(r, g, b));\n        newColorCache[brightness][saturation] = {\n          hexColor,\n          labLightness,\n          hsbText: `H: ${hue}° S: ${saturation}% B: ${brightness}%`\n        };\n      }\n    }\n    setColorCache(newColorCache);\n  }, [hue]);\n\n  // Update dots when cache or filters change\n  useEffect(() => {\n    const newDots = [];\n    const lValuesSet = new Set(lValues);\n    let matchingDot = null;\n\n    // Convert key hex code to HSB if it exists\n    let keyHsb = null;\n    if (keyHexCode) {\n      keyHsb = hexToHsb(keyHexCode);\n    }\n\n    // First pass: collect all dots and find matching dot\n    for (let row = 0; row < 101; row++) {\n      for (let col = 0; col < 101; col++) {\n        var _colorCache$brightnes;\n        const brightness = 100 - row;\n        const saturation = col;\n        const cached = (_colorCache$brightnes = colorCache[brightness]) === null || _colorCache$brightnes === void 0 ? void 0 : _colorCache$brightnes[col];\n        if (cached) {\n          // Check if this dot matches the key HSB values\n          const isActive = keyHsb !== null && Math.abs(keyHsb.h - hue) < 1 &&\n          // Allow small floating point differences\n          Math.abs(keyHsb.s - saturation) < 1 && Math.abs(keyHsb.b - brightness) < 1;\n          if (isActive) {\n            matchingDot = {\n              row,\n              col\n            };\n          }\n          let isFiltered = false;\n          const dotKey = `${row}-${col}`;\n\n          // Apply color ramp filtering\n          if (isFiltering && lValuesSet.size > 0) {\n            isFiltered = !lValuesSet.has(cached.labLightness);\n          }\n\n          // Apply color picking mode filtering\n          if (isPickingColor && activeLValue !== null) {\n            isFiltered = cached.labLightness !== activeLValue;\n          }\n\n          // Check if dot is in activeDots set\n          const isInActiveDots = activeDots.has(dotKey);\n          newDots.push({\n            row,\n            col,\n            hexColor: cached.hexColor,\n            labLightness: cached.labLightness,\n            hsbText: cached.hsbText,\n            isActive: isActive || isInActiveDots,\n            isFiltered\n          });\n        }\n      }\n    }\n    setDots(newDots);\n  }, [colorCache, isFiltering, isATextContrast, isAATextContrast, isAAATextContrast, lValues, activeDots, keyHexCode, isPickingColor, activeLValue, hue // Add hue to dependencies since we use it for comparison\n  ]);\n  const handleDotClick = useCallback(dot => {\n    onDotClick(dot);\n  }, [onDotClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"color-grid\",\n    children: dots.map(dot => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dot ${dot.isActive ? \"active\" : \"\"} ${dot.isFiltered ? \"filtered\" : \"\"}`,\n      style: {\n        backgroundColor: dot.hexColor\n      },\n      onClick: () => handleDotClick(dot),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hex-tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-value\",\n          children: dot.hexColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lab-value\",\n          children: [\"L*: \", dot.labLightness]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hsb-value\",\n          children: dot.hsbText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, `${dot.row}-${dot.col}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorGrid, \"tBhGWsj210Woe927C85gBOnny5U=\");\n_c = ColorGrid;\nexport default ColorGrid;\nvar _c;\n$RefreshReg$(_c, \"ColorGrid\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","hsbToRgb","rgbToHex","getRgbLabLightness","hexToHsb","jsxDEV","_jsxDEV","ColorGrid","hue","isFiltering","isATextContrast","isAATextContrast","isAAATextContrast","lValues","onDotClick","activeDots","keyHexCode","isPickingColor","activeLValue","_s","dots","setDots","colorCache","setColorCache","newColorCache","Array","fill","map","brightness","saturation","r","g","b","hexColor","toUpperCase","labLightness","Math","round","hsbText","newDots","lValuesSet","Set","matchingDot","keyHsb","row","col","_colorCache$brightnes","cached","isActive","abs","h","s","isFiltered","dotKey","size","has","isInActiveDots","push","handleDotClick","dot","className","children","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamessullivan/Documents/color-grid/src/components/ColorGrid.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { Dot, ColorCache } from \"../types\";\nimport {\n  hsbToRgb,\n  rgbToHex,\n  getRgbLabLightness,\n  calculateContrastRatio,\n  colorDistance,\n  hexToHsb,\n} from \"../utils/colorUtils\";\nimport \"../styles/ColorGrid.css\";\n\ninterface ColorGridProps {\n  hue: number;\n  isFiltering: boolean;\n  isATextContrast: boolean;\n  isAATextContrast: boolean;\n  isAAATextContrast: boolean;\n  lValues: number[];\n  onDotClick: (dot: Dot) => void;\n  activeDots: Set<string>;\n  keyHexCode: string;\n  isPickingColor: boolean;\n  activeLValue: number | null;\n}\n\nconst ColorGrid: React.FC<ColorGridProps> = ({\n  hue,\n  isFiltering,\n  isATextContrast,\n  isAATextContrast,\n  isAAATextContrast,\n  lValues,\n  onDotClick,\n  activeDots,\n  keyHexCode,\n  isPickingColor,\n  activeLValue,\n}) => {\n  const [dots, setDots] = useState<Dot[]>([]);\n  const [colorCache, setColorCache] = useState<ColorCache[][]>([]);\n\n  // Pre-calculate color cache\n  useEffect(() => {\n    const newColorCache: ColorCache[][] = Array(101)\n      .fill(null)\n      .map(() => Array(101).fill(null));\n\n    for (let brightness = 0; brightness <= 100; brightness++) {\n      for (let saturation = 0; saturation <= 100; saturation++) {\n        const [r, g, b] = hsbToRgb(hue, saturation, brightness);\n        const hexColor = rgbToHex(r, g, b).toUpperCase();\n        const labLightness = Math.round(getRgbLabLightness(r, g, b));\n        newColorCache[brightness][saturation] = {\n          hexColor,\n          labLightness,\n          hsbText: `H: ${hue}° S: ${saturation}% B: ${brightness}%`,\n        };\n      }\n    }\n\n    setColorCache(newColorCache);\n  }, [hue]);\n\n  // Update dots when cache or filters change\n  useEffect(() => {\n    const newDots: Dot[] = [];\n    const lValuesSet = new Set(lValues);\n    let matchingDot: { row: number; col: number } | null = null;\n\n    // Convert key hex code to HSB if it exists\n    let keyHsb: { h: number; s: number; b: number } | null = null;\n    if (keyHexCode) {\n      keyHsb = hexToHsb(keyHexCode);\n    }\n\n    // First pass: collect all dots and find matching dot\n    for (let row = 0; row < 101; row++) {\n      for (let col = 0; col < 101; col++) {\n        const brightness = 100 - row;\n        const saturation = col;\n        const cached = colorCache[brightness]?.[col];\n\n        if (cached) {\n          // Check if this dot matches the key HSB values\n          const isActive =\n            keyHsb !== null &&\n            Math.abs(keyHsb.h - hue) < 1 && // Allow small floating point differences\n            Math.abs(keyHsb.s - saturation) < 1 &&\n            Math.abs(keyHsb.b - brightness) < 1;\n\n          if (isActive) {\n            matchingDot = { row, col };\n          }\n\n          let isFiltered = false;\n          const dotKey = `${row}-${col}`;\n\n          // Apply color ramp filtering\n          if (isFiltering && lValuesSet.size > 0) {\n            isFiltered = !lValuesSet.has(cached.labLightness);\n          }\n\n          // Apply color picking mode filtering\n          if (isPickingColor && activeLValue !== null) {\n            isFiltered = cached.labLightness !== activeLValue;\n          }\n\n          // Check if dot is in activeDots set\n          const isInActiveDots = activeDots.has(dotKey);\n\n          newDots.push({\n            row,\n            col,\n            hexColor: cached.hexColor,\n            labLightness: cached.labLightness,\n            hsbText: cached.hsbText,\n            isActive: isActive || isInActiveDots,\n            isFiltered,\n          });\n        }\n      }\n    }\n\n    setDots(newDots);\n  }, [\n    colorCache,\n    isFiltering,\n    isATextContrast,\n    isAATextContrast,\n    isAAATextContrast,\n    lValues,\n    activeDots,\n    keyHexCode,\n    isPickingColor,\n    activeLValue,\n    hue, // Add hue to dependencies since we use it for comparison\n  ]);\n\n  const handleDotClick = useCallback(\n    (dot: Dot) => {\n      onDotClick(dot);\n    },\n    [onDotClick]\n  );\n\n  return (\n    <div className=\"color-grid\">\n      {dots.map((dot) => (\n        <div\n          key={`${dot.row}-${dot.col}`}\n          className={`dot ${dot.isActive ? \"active\" : \"\"} ${\n            dot.isFiltered ? \"filtered\" : \"\"\n          }`}\n          style={{ backgroundColor: dot.hexColor }}\n          onClick={() => handleDotClick(dot)}\n        >\n          <div className=\"hex-tooltip\">\n            <div className=\"hex-value\">{dot.hexColor}</div>\n            <div className=\"lab-value\">L*: {dot.labLightness}</div>\n            <div className=\"hsb-value\">{dot.hsbText}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ColorGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}