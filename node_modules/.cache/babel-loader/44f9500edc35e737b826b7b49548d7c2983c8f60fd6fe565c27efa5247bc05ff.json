{"ast":null,"code":"// RGB to Hex conversion\nexport const rgbToHex = (r, g, b) => {\n  return \"#\" + [r, g, b].map(x => {\n    const hex = x.toString(16).toUpperCase();\n    return hex.length === 1 ? \"0\" + hex : hex;\n  }).join(\"\");\n};\n\n// HSB to RGB conversion\nexport const hsbToRgb = (h, s, b) => {\n  h = h / 360;\n  s = s / 100;\n  b = b / 100;\n  let r, g, b_;\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = b * (1 - s);\n  const q = b * (1 - f * s);\n  const t = b * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      r = b;\n      g = t;\n      b_ = p;\n      break;\n    case 1:\n      r = q;\n      g = b;\n      b_ = p;\n      break;\n    case 2:\n      r = p;\n      g = b;\n      b_ = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b_ = b;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b_ = b;\n      break;\n    case 5:\n      r = b;\n      g = p;\n      b_ = q;\n      break;\n    default:\n      r = b;\n      g = t;\n      b_ = p;\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b_ * 255)];\n};\n\n// RGB to XYZ conversion\nexport const rgbToXyz = (r, g, b) => {\n  r = r / 255;\n  g = g / 255;\n  b = b / 255;\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n  r *= 100;\n  g *= 100;\n  b *= 100;\n  const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n  const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n  const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n  return [x, y, z];\n};\n\n// XYZ to LAB conversion\nexport const xyzToLab = (x, y, z) => {\n  x = x / 95.047;\n  y = y / 100.0;\n  z = z / 108.883;\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n  return [l, a, b];\n};\n\n// Get LAB lightness from RGB\nexport const getRgbLabLightness = (r, g, b) => {\n  const [x, y, z] = rgbToXyz(r, g, b);\n  const [l] = xyzToLab(x, y, z);\n  return l;\n};\n\n// Convert L* value to RGB color\nexport const labToRgb = l => {\n  // Special case for pure white (L* = 100)\n  if (l === 100) {\n    return [255, 255, 255];\n  }\n\n  // Special case for pure black (L* = 0)\n  if (l === 0) {\n    return [0, 0, 0];\n  }\n\n  // Convert L* to XYZ (using a=0, b=0 for neutral gray)\n  const y = (l + 16) / 116;\n  const x = y;\n  const z = y;\n\n  // Convert to XYZ\n  const x3 = Math.pow(x, 3);\n  const y3 = Math.pow(y, 3);\n  const z3 = Math.pow(z, 3);\n  const xr = x3 > 0.008856 ? x3 : (x - 16 / 116) / 7.787;\n  const yr = y3 > 0.008856 ? y3 : (y - 16 / 116) / 7.787;\n  const zr = z3 > 0.008856 ? z3 : (z - 16 / 116) / 7.787;\n\n  // Convert XYZ to RGB using D65 illuminant\n  const r = xr * 3.2404542 + yr * -1.5371385 + zr * -0.4985314;\n  const g = xr * -0.969266 + yr * 1.8760108 + zr * 0.041556;\n  const b = xr * 0.0556434 + yr * -0.2040259 + zr * 1.0572252;\n\n  // Apply gamma correction and convert to 0-255 range\n  const gammaCorrection = c => {\n    return c <= 0.0031308 ? 12.92 * c : 1.055 * Math.pow(c, 1 / 2.4) - 0.055;\n  };\n  const r255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(r) * 255)));\n  const g255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(g) * 255)));\n  const b255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(b) * 255)));\n\n  // Ensure neutral gray by using the average of all channels\n  const grayValue = Math.round((r255 + g255 + b255) / 3);\n  return [grayValue, grayValue, grayValue];\n};\n\n// Calculate WCAG contrast ratio between two colors\nexport const calculateContrastRatio = (hexColor1, hexColor2 = \"#FFFFFF\") => {\n  const getRGB = hex => {\n    const r = parseInt(hex.slice(1, 3), 16) / 255;\n    const g = parseInt(hex.slice(3, 5), 16) / 255;\n    const b = parseInt(hex.slice(5, 7), 16) / 255;\n    return [r, g, b];\n  };\n  const getLuminance = c => {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  };\n  const [r1, g1, b1] = getRGB(hexColor1);\n  const [r2, g2, b2] = getRGB(hexColor2);\n  const l1 = 0.2126 * getLuminance(r1) + 0.7152 * getLuminance(g1) + 0.0722 * getLuminance(b1);\n  const l2 = 0.2126 * getLuminance(r2) + 0.7152 * getLuminance(g2) + 0.0722 * getLuminance(b2);\n  const lighter = Math.max(l1, l2);\n  const darker = Math.min(l1, l2);\n  return (lighter + 0.05) / (darker + 0.05);\n};\nexport function rgbToHsb(r, g, b) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n  let h = 0;\n  let s = max === 0 ? 0 : delta / max;\n  let v = max;\n  if (delta !== 0) {\n    if (max === r) {\n      h = (g - b) / delta % 6;\n    } else if (max === g) {\n      h = (b - r) / delta + 2;\n    } else {\n      h = (r - g) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n  }\n  s = Math.round(s * 100);\n  v = Math.round(v * 100);\n  return [h, s, v];\n}\n\n// Convert hex to RGB\nexport const hexToRgb = hex => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n  return [r, g, b];\n};\n\n// Calculate distance between two colors in HSB space\nexport const colorDistance = (hex1, hex2) => {\n  const [r1, g1, b1] = hexToRgb(hex1);\n  const [r2, g2, b2] = hexToRgb(hex2);\n\n  // Convert both colors to HSB\n  const [h1, s1, b1_] = rgbToHsb(r1, g1, b1);\n  const [h2, s2, b2_] = rgbToHsb(r2, g2, b2);\n\n  // Calculate weighted distance in HSB space\n  // Since we're already using the same hue for the grid, we only need to compare saturation and brightness\n  const sWeight = 1.0;\n  const bWeight = 1.0;\n  return Math.sqrt(Math.pow((s1 - s2) * sWeight, 2) + Math.pow((b1_ - b2_) * bWeight, 2));\n};\nexport function hexToHsb(hex) {\n  // Remove # if present\n  hex = hex.replace(/^#/, \"\");\n\n  // Convert hex to RGB\n  const r = parseInt(hex.substring(0, 2), 16) / 255;\n  const g = parseInt(hex.substring(2, 4), 16) / 255;\n  const b = parseInt(hex.substring(4, 6), 16) / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n  let h = 0;\n  let s = max === 0 ? 0 : delta / max;\n  let v = max;\n  if (delta !== 0) {\n    if (max === r) {\n      h = (g - b) / delta % 6;\n    } else if (max === g) {\n      h = (b - r) / delta + 2;\n    } else {\n      h = (r - g) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n  }\n\n  // Convert to percentages\n  s = Math.round(s * 100);\n  v = Math.round(v * 100);\n  return {\n    h,\n    s,\n    b: v\n  };\n}","map":{"version":3,"names":["rgbToHex","r","g","b","map","x","hex","toString","toUpperCase","length","join","hsbToRgb","h","s","b_","i","Math","floor","f","p","q","t","round","rgbToXyz","pow","y","z","xyzToLab","l","a","getRgbLabLightness","labToRgb","x3","y3","z3","xr","yr","zr","gammaCorrection","c","r255","max","min","g255","b255","grayValue","calculateContrastRatio","hexColor1","hexColor2","getRGB","parseInt","slice","getLuminance","r1","g1","b1","r2","g2","b2","l1","l2","lighter","darker","rgbToHsb","delta","v","hexToRgb","colorDistance","hex1","hex2","h1","s1","b1_","h2","s2","b2_","sWeight","bWeight","sqrt","hexToHsb","replace","substring"],"sources":["/Users/jamessullivan/Documents/color-grid/src/utils/colorUtils.ts"],"sourcesContent":["// RGB to Hex conversion\nexport const rgbToHex = (r: number, g: number, b: number): string => {\n  return (\n    \"#\" +\n    [r, g, b]\n      .map((x) => {\n        const hex = x.toString(16).toUpperCase();\n        return hex.length === 1 ? \"0\" + hex : hex;\n      })\n      .join(\"\")\n  );\n};\n\n// HSB to RGB conversion\nexport const hsbToRgb = (\n  h: number,\n  s: number,\n  b: number\n): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  b = b / 100;\n\n  let r: number, g: number, b_: number;\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = b * (1 - s);\n  const q = b * (1 - f * s);\n  const t = b * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = b;\n      g = t;\n      b_ = p;\n      break;\n    case 1:\n      r = q;\n      g = b;\n      b_ = p;\n      break;\n    case 2:\n      r = p;\n      g = b;\n      b_ = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b_ = b;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b_ = b;\n      break;\n    case 5:\n      r = b;\n      g = p;\n      b_ = q;\n      break;\n    default:\n      r = b;\n      g = t;\n      b_ = p;\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b_ * 255)];\n};\n\n// RGB to XYZ conversion\nexport const rgbToXyz = (\n  r: number,\n  g: number,\n  b: number\n): [number, number, number] => {\n  r = r / 255;\n  g = g / 255;\n  b = b / 255;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  r *= 100;\n  g *= 100;\n  b *= 100;\n\n  const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n  const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n  const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n\n  return [x, y, z];\n};\n\n// XYZ to LAB conversion\nexport const xyzToLab = (\n  x: number,\n  y: number,\n  z: number\n): [number, number, number] => {\n  x = x / 95.047;\n  y = y / 100.0;\n  z = z / 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n\n  return [l, a, b];\n};\n\n// Get LAB lightness from RGB\nexport const getRgbLabLightness = (r: number, g: number, b: number): number => {\n  const [x, y, z] = rgbToXyz(r, g, b);\n  const [l] = xyzToLab(x, y, z);\n  return l;\n};\n\n// Convert L* value to RGB color\nexport const labToRgb = (l: number): [number, number, number] => {\n  // Special case for pure white (L* = 100)\n  if (l === 100) {\n    return [255, 255, 255];\n  }\n\n  // Special case for pure black (L* = 0)\n  if (l === 0) {\n    return [0, 0, 0];\n  }\n\n  // Convert L* to XYZ (using a=0, b=0 for neutral gray)\n  const y = (l + 16) / 116;\n  const x = y;\n  const z = y;\n\n  // Convert to XYZ\n  const x3 = Math.pow(x, 3);\n  const y3 = Math.pow(y, 3);\n  const z3 = Math.pow(z, 3);\n\n  const xr = x3 > 0.008856 ? x3 : (x - 16 / 116) / 7.787;\n  const yr = y3 > 0.008856 ? y3 : (y - 16 / 116) / 7.787;\n  const zr = z3 > 0.008856 ? z3 : (z - 16 / 116) / 7.787;\n\n  // Convert XYZ to RGB using D65 illuminant\n  const r = xr * 3.2404542 + yr * -1.5371385 + zr * -0.4985314;\n  const g = xr * -0.969266 + yr * 1.8760108 + zr * 0.041556;\n  const b = xr * 0.0556434 + yr * -0.2040259 + zr * 1.0572252;\n\n  // Apply gamma correction and convert to 0-255 range\n  const gammaCorrection = (c: number): number => {\n    return c <= 0.0031308 ? 12.92 * c : 1.055 * Math.pow(c, 1 / 2.4) - 0.055;\n  };\n\n  const r255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(r) * 255)));\n  const g255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(g) * 255)));\n  const b255 = Math.max(0, Math.min(255, Math.round(gammaCorrection(b) * 255)));\n\n  // Ensure neutral gray by using the average of all channels\n  const grayValue = Math.round((r255 + g255 + b255) / 3);\n  return [grayValue, grayValue, grayValue];\n};\n\n// Calculate WCAG contrast ratio between two colors\nexport const calculateContrastRatio = (\n  hexColor1: string,\n  hexColor2: string = \"#FFFFFF\"\n): number => {\n  const getRGB = (hex: string): [number, number, number] => {\n    const r = parseInt(hex.slice(1, 3), 16) / 255;\n    const g = parseInt(hex.slice(3, 5), 16) / 255;\n    const b = parseInt(hex.slice(5, 7), 16) / 255;\n    return [r, g, b];\n  };\n\n  const getLuminance = (c: number): number => {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  };\n\n  const [r1, g1, b1] = getRGB(hexColor1);\n  const [r2, g2, b2] = getRGB(hexColor2);\n\n  const l1 =\n    0.2126 * getLuminance(r1) +\n    0.7152 * getLuminance(g1) +\n    0.0722 * getLuminance(b1);\n\n  const l2 =\n    0.2126 * getLuminance(r2) +\n    0.7152 * getLuminance(g2) +\n    0.0722 * getLuminance(b2);\n\n  const lighter = Math.max(l1, l2);\n  const darker = Math.min(l1, l2);\n  return (lighter + 0.05) / (darker + 0.05);\n};\n\nexport function rgbToHsb(\n  r: number,\n  g: number,\n  b: number\n): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  let h = 0;\n  let s = max === 0 ? 0 : delta / max;\n  let v = max;\n\n  if (delta !== 0) {\n    if (max === r) {\n      h = ((g - b) / delta) % 6;\n    } else if (max === g) {\n      h = (b - r) / delta + 2;\n    } else {\n      h = (r - g) / delta + 4;\n    }\n\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n  }\n\n  s = Math.round(s * 100);\n  v = Math.round(v * 100);\n\n  return [h, s, v];\n}\n\n// Convert hex to RGB\nexport const hexToRgb = (hex: string): [number, number, number] => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n  return [r, g, b];\n};\n\n// Calculate distance between two colors in HSB space\nexport const colorDistance = (hex1: string, hex2: string): number => {\n  const [r1, g1, b1] = hexToRgb(hex1);\n  const [r2, g2, b2] = hexToRgb(hex2);\n\n  // Convert both colors to HSB\n  const [h1, s1, b1_] = rgbToHsb(r1, g1, b1);\n  const [h2, s2, b2_] = rgbToHsb(r2, g2, b2);\n\n  // Calculate weighted distance in HSB space\n  // Since we're already using the same hue for the grid, we only need to compare saturation and brightness\n  const sWeight = 1.0;\n  const bWeight = 1.0;\n\n  return Math.sqrt(\n    Math.pow((s1 - s2) * sWeight, 2) + Math.pow((b1_ - b2_) * bWeight, 2)\n  );\n};\n\nexport function hexToHsb(hex: string): { h: number; s: number; b: number } {\n  // Remove # if present\n  hex = hex.replace(/^#/, \"\");\n\n  // Convert hex to RGB\n  const r = parseInt(hex.substring(0, 2), 16) / 255;\n  const g = parseInt(hex.substring(2, 4), 16) / 255;\n  const b = parseInt(hex.substring(4, 6), 16) / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  let h = 0;\n  let s = max === 0 ? 0 : delta / max;\n  let v = max;\n\n  if (delta !== 0) {\n    if (max === r) {\n      h = ((g - b) / delta) % 6;\n    } else if (max === g) {\n      h = (b - r) / delta + 2;\n    } else {\n      h = (r - g) / delta + 4;\n    }\n\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n  }\n\n  // Convert to percentages\n  s = Math.round(s * 100);\n  v = Math.round(v * 100);\n\n  return { h, s, b: v };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}